{"ast":null,"code":"var _jsxFileName = \"/Users/sanami/Desktop/react/webgl/src/pages/2.js\";\nimport React, { Suspense, useEffect, useMemo } from \"react\";\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport { useRef } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport PageNation from \"../components/PageNation\";\nimport { BoxBufferGeometry } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Num2 = props => {\n  var _s = $RefreshSig$();\n\n  // function Instances({ count = 9, temp = new THREE.Object3D() }) {\n  //     const ref = useRef()\n  //     useFrame((state, delta) => (ref.current.rotation.z -= 0.001))\n  //     useEffect(() => {\n  //         // Set positions\n  //         for (let i = 0; i < count; i++) {\n  //             const id = i++;\n  //             temp.position.set(0, 0, i);\n  //             temp.scale.set(i, i, i);\n  //             temp.updateMatrix()\n  //             ref.current.setMatrixAt(id, temp.matrix)\n  //         }\n  //         // Update the instance\n  //         // ref.current.instanceMatrix.needsUpdate = true\n  //     }, [])\n  //     return (\n  //         <instancedMesh ref={ref} args={[null, null, count]} scale={0.1} rotation={[0, 0, Math.PI / 2]}>\n  //             <ringBufferGeometry args={[5, -5, 1]} />\n  //             <meshPhongMaterial color={'dimgray'} transparent opacity={'0.4'} />\n  //         </instancedMesh>\n  //     )\n  // };\n  // function Fireflies({ count = 40 }) {\n  //     const shader = useRef()\n  //     const [positionArray, scaleArray] = useMemo(() => {\n  //         const positionArray = new Float32Array(count * 3)\n  //         const scaleArray = new Float32Array(count)\n  //         for (let i = 0; i < count; i++) {\n  //             new THREE.Vector3((Math.random() - 0.5) * 4, Math.random() * 1.5, (Math.random() - 0.5) * 4).toArray(positionArray, i * 3)\n  //             scaleArray[i] = Math.random()\n  //         }\n  //         return [positionArray, scaleArray]\n  //     }, [count])\n  //     useFrame((state, delta) => (shader.current.time += delta / 2))\n  //     return (\n  //         <points key={count}>\n  //             <bufferGeometry>\n  //                 <bufferAttribute attachObject={['attributes', 'position']} count={count} array={positionArray} itemSize={3} />\n  //                 <bufferAttribute attachObject={['attributes', 'aScale']} count={count} array={scaleArray} itemSize={1} />\n  //             </bufferGeometry>\n  //             <fireflyMaterial ref={shader} transparent depthWrite={false} />\n  //         </points>\n  //     )\n  // };\n  // function Fatline({ curve, width, color, speed }) {\n  //     const material = useRef()\n  //     // useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  //     return (\n  //         <mesh>\n  //             <BoxBufferGeometry attach=\"geometry\" vertices={curve} />\n  //             <meshPhongMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n  //         </mesh>\n  //     )\n  // };\n  // function Lines({ count, colors }) {\n  //     const lines = useMemo(\n  //         () =>\n  //             new Array(count).fill().map(() => {\n  //                 const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n  //                 const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n  //                 const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n  //                 return {\n  //                     color: colors[parseInt(colors.length * Math.random())],\n  //                     width: Math.max(0.1, 0.5 * Math.random()),\n  //                     speed: Math.max(0.0001, 0.0005 * Math.random()),\n  //                     curve\n  //                 }\n  //             }),\n  //         [colors, count]\n  //     )\n  //     return lines.map((props, index) => <Fatline key={index} {...props} />)\n  // };\n  function Particles({\n    count,\n    mouse\n  }) {\n    _s();\n\n    const mesh = useRef();\n    const light = useRef();\n    const {\n      size,\n      viewport\n    } = useThree();\n    const aspect = size.width / viewport.width;\n    const dummy = useMemo(() => new THREE.Object3D(), []); // Generate some random positions, speed factors and timings\n\n    const particles = useMemo(() => {\n      const temp = [];\n\n      for (let i = 0; i < count; i++) {\n        const t = Math.random() * 100;\n        const factor = 20 + Math.random() * 100;\n        const speed = 0.01 + Math.random() / 200;\n        const xFactor = -50 + Math.random() * 100;\n        const yFactor = -50 + Math.random() * 100;\n        const zFactor = -50 + Math.random() * 100;\n        temp.push({\n          t,\n          factor,\n          speed,\n          xFactor,\n          yFactor,\n          zFactor,\n          mx: 0,\n          my: 0\n        });\n      }\n\n      return temp;\n    }, [count]); // The innards of this hook will run every frame\n\n    useFrame(state => {\n      // Makes the light follow the mouse\n      // light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0)\n      // Run through the randomized data to calculate some movement\n      particles.forEach((particle, i) => {\n        let {\n          t,\n          factor,\n          speed,\n          xFactor,\n          yFactor,\n          zFactor\n        } = particle; // There is no sense or reason to any of this, just messing around with trigonometric functions\n\n        t = particle.t += speed / 2;\n        const a = Math.cos(t) + Math.sin(t * 1) / 10;\n        const b = Math.sin(t) + Math.cos(t * 2) / 10;\n        const s = Math.cos(t); // particle.mx += (mouse.current[0] - particle.mx) * 0.01\n        // particle.my += (mouse.current[1] * -1 - particle.my) * 0.01\n        // Update the dummy object\n\n        dummy.position.set(particle.mx / 10 * a + xFactor + Math.cos(t / 10 * factor) + Math.sin(t * 1) * factor / 10, particle.my / 10 * b + yFactor + Math.sin(t / 10 * factor) + Math.cos(t * 2) * factor / 10, particle.my / 10 * b + zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 10);\n        dummy.scale.set(s, s, s);\n        dummy.rotation.set(s * 5, s * 5, s * 5);\n        dummy.updateMatrix(); // And apply the matrix to the instanced item\n\n        mesh.current.setMatrixAt(i, dummy.matrix);\n      }); // mesh.current.instanceMatrix.needsUpdate = true\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pointLight\", {\n        ref: light,\n        distance: 40,\n        intensity: 8,\n        color: \"lightblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n        ref: mesh,\n        args: [null, null, count],\n        children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n          args: [0.2, 0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: \"#050505\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  _s(Particles, \"ZnorHZ9938QmZd23D59V2+jCdvQ=\", false, function () {\n    return [useThree, useFrame];\n  });\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [props.num, \" / 365\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daily-canvas\",\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        shadows: true,\n        performance: {\n          min: 0.5\n        },\n        dpr: [1, 2],\n        camera: {\n          fov: 100,\n          position: [0, 0, 5]\n        },\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 41\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(\"color\", {\n            attach: \"background\",\n            args: ['#ff']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Particles, {\n            count: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n            enablePan: true,\n            enableZoom: true,\n            enableRotate: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"essay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"source\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"(1) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"(2) \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://www.cinra.net/interview/201404-mumgypsykawakami\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"\\u85E4\\u7530\\u8CB4\\u5927\\xD7\\u5DDD\\u4E0A\\u672A\\u6620\\u5B50\\u306E\\u53EB\\u3073\\u300C\\u307E\\u3060\\u5168\\u7136\\u8A00\\u3044\\u8DB3\\u308A\\u3066\\u306A\\u3044\\u300D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this), \" 2014/04/03\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date\",\n          children: \"2021.09.23\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PageNation, {\n      prev: \"1\",\n      next: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Num2;\nexport default Num2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Num2\");","map":{"version":3,"sources":["/Users/sanami/Desktop/react/webgl/src/pages/2.js"],"names":["React","Suspense","useEffect","useMemo","OrbitControls","Environment","useRef","Canvas","useFrame","useThree","THREE","PageNation","BoxBufferGeometry","Num2","props","Particles","count","mouse","mesh","light","size","viewport","aspect","width","dummy","Object3D","particles","temp","i","t","Math","random","factor","speed","xFactor","yFactor","zFactor","push","mx","my","state","forEach","particle","a","cos","sin","b","s","position","set","scale","rotation","updateMatrix","current","setMatrixAt","matrix","num","min","fov"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect, useMemo } from \"react\";\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport { useRef } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport PageNation from \"../components/PageNation\";\nimport { BoxBufferGeometry } from \"three\";\n\nconst Num2 = (props) => {\n\n    // function Instances({ count = 9, temp = new THREE.Object3D() }) {\n    //     const ref = useRef()\n    //     useFrame((state, delta) => (ref.current.rotation.z -= 0.001))\n\n    //     useEffect(() => {\n    //         // Set positions\n    //         for (let i = 0; i < count; i++) {\n    //             const id = i++;\n    //             temp.position.set(0, 0, i);\n    //             temp.scale.set(i, i, i);\n    //             temp.updateMatrix()\n    //             ref.current.setMatrixAt(id, temp.matrix)\n    //         }\n    //         // Update the instance\n    //         // ref.current.instanceMatrix.needsUpdate = true\n    //     }, [])\n    //     return (\n    //         <instancedMesh ref={ref} args={[null, null, count]} scale={0.1} rotation={[0, 0, Math.PI / 2]}>\n    //             <ringBufferGeometry args={[5, -5, 1]} />\n    //             <meshPhongMaterial color={'dimgray'} transparent opacity={'0.4'} />\n    //         </instancedMesh>\n    //     )\n    // };\n\n    // function Fireflies({ count = 40 }) {\n    //     const shader = useRef()\n    //     const [positionArray, scaleArray] = useMemo(() => {\n    //         const positionArray = new Float32Array(count * 3)\n    //         const scaleArray = new Float32Array(count)\n    //         for (let i = 0; i < count; i++) {\n    //             new THREE.Vector3((Math.random() - 0.5) * 4, Math.random() * 1.5, (Math.random() - 0.5) * 4).toArray(positionArray, i * 3)\n    //             scaleArray[i] = Math.random()\n    //         }\n    //         return [positionArray, scaleArray]\n    //     }, [count])\n    //     useFrame((state, delta) => (shader.current.time += delta / 2))\n    //     return (\n    //         <points key={count}>\n    //             <bufferGeometry>\n    //                 <bufferAttribute attachObject={['attributes', 'position']} count={count} array={positionArray} itemSize={3} />\n    //                 <bufferAttribute attachObject={['attributes', 'aScale']} count={count} array={scaleArray} itemSize={1} />\n    //             </bufferGeometry>\n    //             <fireflyMaterial ref={shader} transparent depthWrite={false} />\n    //         </points>\n    //     )\n    // };\n\n    // function Fatline({ curve, width, color, speed }) {\n    //     const material = useRef()\n    //     // useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n    //     return (\n    //         <mesh>\n    //             <BoxBufferGeometry attach=\"geometry\" vertices={curve} />\n    //             <meshPhongMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n    //         </mesh>\n    //     )\n    // };\n\n    // function Lines({ count, colors }) {\n    //     const lines = useMemo(\n    //         () =>\n    //             new Array(count).fill().map(() => {\n    //                 const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n    //                 const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n    //                 const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n    //                 return {\n    //                     color: colors[parseInt(colors.length * Math.random())],\n    //                     width: Math.max(0.1, 0.5 * Math.random()),\n    //                     speed: Math.max(0.0001, 0.0005 * Math.random()),\n    //                     curve\n    //                 }\n    //             }),\n    //         [colors, count]\n    //     )\n    //     return lines.map((props, index) => <Fatline key={index} {...props} />)\n    // };\n\n    function Particles({ count, mouse }) {\n        const mesh = useRef()\n        const light = useRef()\n        const { size, viewport } = useThree()\n        const aspect = size.width / viewport.width\n\n        const dummy = useMemo(() => new THREE.Object3D(), [])\n        // Generate some random positions, speed factors and timings\n        const particles = useMemo(() => {\n            const temp = []\n            for (let i = 0; i < count; i++) {\n                const t = Math.random() * 100\n                const factor = 20 + Math.random() * 100\n                const speed = 0.01 + Math.random() / 200\n                const xFactor = -50 + Math.random() * 100\n                const yFactor = -50 + Math.random() * 100\n                const zFactor = -50 + Math.random() * 100\n                temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n            }\n            return temp\n        }, [count])\n        // The innards of this hook will run every frame\n        useFrame((state) => {\n            // Makes the light follow the mouse\n            // light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0)\n            // Run through the randomized data to calculate some movement\n            particles.forEach((particle, i) => {\n                let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n                // There is no sense or reason to any of this, just messing around with trigonometric functions\n                t = particle.t += speed / 2\n                const a = Math.cos(t) + Math.sin(t * 1) / 10\n                const b = Math.sin(t) + Math.cos(t * 2) / 10\n                const s = Math.cos(t)\n                // particle.mx += (mouse.current[0] - particle.mx) * 0.01\n                // particle.my += (mouse.current[1] * -1 - particle.my) * 0.01\n                // Update the dummy object\n                dummy.position.set(\n                    (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n                    (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n                    (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n                )\n                dummy.scale.set(s, s, s)\n                dummy.rotation.set(s * 5, s * 5, s * 5)\n                dummy.updateMatrix()\n                // And apply the matrix to the instanced item\n                mesh.current.setMatrixAt(i, dummy.matrix)\n            })\n            // mesh.current.instanceMatrix.needsUpdate = true\n        })\n        return (\n            <>\n                <pointLight ref={light} distance={40} intensity={8} color=\"lightblue\" />\n                <instancedMesh ref={mesh} args={[null, null, count]}>\n                    <dodecahedronGeometry args={[0.2, 0]} />\n                    <meshPhongMaterial color=\"#050505\" />\n                </instancedMesh>\n            </>\n        )\n    };\n\n\n\n    return (\n        <>\n            <h2>{props.num} / 365</h2>\n            <div className=\"daily-canvas\">\n                <Canvas\n                    shadows\n                    performance={{ min: 0.5 }}\n                    dpr={[1, 2]}\n                    camera={{ fov: 100, position: [0, 0, 5] }}\n                >\n\n                    {/* <ambientLight intensity={0.5} />\n                        <pointLight position={[5, 5, 10]} intensity={0.5} />\n                        <directionalLight position={[10, 10, 5]} color=\"#fff\" intensity={1} /> */}\n                    {/* <fog attach=\"fog\" args={['#1e2243', 0, 15]} /> */}\n\n                    <Suspense fallback={<span>loading...</span>}>\n\n                    <color attach=\"background\" args={['#ff']} />\n                        {/* <Environment preset=\"sunset\" background /> */}\n                        <ambientLight />\n                        {/* <Instances /> */}\n                        {/* <Fireflies count={40}/> */}\n                        {/* <Lines count={100} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} /> */}\n                        <Particles count={50} />\n                        <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\n                    </Suspense>\n                </Canvas>\n                <div className=\"essay\">\n                    <h3></h3>\n\n                    <p></p>\n                    <ul className=\"source\">\n                        <li>(1) </li>\n                        <li>(2) <a href=\"https://www.cinra.net/interview/201404-mumgypsykawakami\" target=\"_blank\" rel=\"noreferrer\">藤田貴大×川上未映子の叫び「まだ全然言い足りてない」</a> 2014/04/03</li>\n                    </ul>\n                    <p className=\"date\">2021.09.23</p>\n                </div>\n            </div>\n            <PageNation prev=\"1\" next=\"3\" />\n        </>\n    );\n}\n\nexport default Num2;"]},"metadata":{},"sourceType":"module"}