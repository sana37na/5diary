{"ast":null,"code":"var _jsxFileName = \"/Users/sanami/Desktop/react/webgl/src/pages/2.js\";\nimport React, { Suspense, useEffect, useMemo } from \"react\";\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport PageNation from \"../components/PageNation\";\nimport { BoxBufferGeometry } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Num1 = props => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$(),\n      _s5 = $RefreshSig$();\n\n  function Instances({\n    count = 9,\n    temp = new THREE.Object3D()\n  }) {\n    _s();\n\n    const ref = useRef();\n    useFrame((state, delta) => ref.current.rotation.z -= 0.001);\n    useEffect(() => {\n      // Set positions\n      for (let i = 0; i < count; i++) {\n        const id = i++;\n        temp.position.set(0, 0, i);\n        temp.scale.set(i, i, i);\n        temp.updateMatrix();\n        ref.current.setMatrixAt(id, temp.matrix);\n      } // Update the instance\n      // ref.current.instanceMatrix.needsUpdate = true\n\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n      ref: ref,\n      args: [null, null, count],\n      scale: 0.1,\n      rotation: [0, 0, Math.PI / 2],\n      children: [/*#__PURE__*/_jsxDEV(\"ringBufferGeometry\", {\n        args: [5, -5, 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: 'dimgray',\n        transparent: true,\n        opacity: '0.4'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(Instances, \"74ow49cg/b996Nhoinp/oAbh9AM=\", false, function () {\n    return [useFrame];\n  });\n\n  ;\n\n  function Fireflies({\n    count = 40\n  }) {\n    _s2();\n\n    const shader = useRef();\n    const [positionArray, scaleArray] = useMemo(() => {\n      const positionArray = new Float32Array(count * 3);\n      const scaleArray = new Float32Array(count);\n\n      for (let i = 0; i < count; i++) {\n        new THREE.Vector3((Math.random() - 0.5) * 4, Math.random() * 1.5, (Math.random() - 0.5) * 4).toArray(positionArray, i * 3);\n        scaleArray[i] = Math.random();\n      }\n\n      return [positionArray, scaleArray];\n    }, [count]);\n    useFrame((state, delta) => shader.current.time += delta / 2);\n    return /*#__PURE__*/_jsxDEV(\"points\", {\n      children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n        children: [/*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n          attachObject: ['attributes', 'position'],\n          count: count,\n          array: positionArray,\n          itemSize: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n          attachObject: ['attributes', 'aScale'],\n          count: count,\n          array: scaleArray,\n          itemSize: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"fireflyMaterial\", {\n        ref: shader,\n        transparent: true,\n        depthWrite: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, count, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(Fireflies, \"WwSV4JLkxmacG3M9usZN6AucJjQ=\", false, function () {\n    return [useFrame];\n  });\n\n  ;\n\n  function Fatline({\n    curve,\n    width,\n    color,\n    speed\n  }) {\n    _s3();\n\n    const material = useRef(); // useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(BoxBufferGeometry, {\n        attach: \"geometry\",\n        vertices: curve\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        attach: \"material\",\n        ref: material,\n        transparent: true,\n        depthTest: false,\n        lineWidth: width,\n        color: color,\n        dashArray: 0.1,\n        dashRatio: 0.9\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s3(Fatline, \"wuWoyjGUCnHvL9b5MDyaA3/i5yQ=\");\n\n  ;\n\n  function Lines({\n    count,\n    colors\n  }) {\n    _s4();\n\n    const lines = useMemo(() => new Array(count).fill().map(() => {\n      const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20);\n      const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone());\n      const curve = new THREE.CatmullRomCurve3(points).getPoints(1000);\n      return {\n        color: colors[parseInt(colors.length * Math.random())],\n        width: Math.max(0.1, 0.5 * Math.random()),\n        speed: Math.max(0.0001, 0.0005 * Math.random()),\n        curve\n      };\n    }), [colors, count]);\n    return lines.map((props, index) => /*#__PURE__*/_jsxDEV(Fatline, { ...props\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 44\n    }, this));\n  }\n\n  _s4(Lines, \"y4EXgIXkKUBV6QgFbGFB1cu0o9w=\");\n\n  ;\n\n  function Particles({\n    count,\n    mouse\n  }) {\n    _s5();\n\n    const mesh = useRef();\n    const light = useRef();\n    const {\n      size,\n      viewport\n    } = useThree();\n    const aspect = size.width / viewport.width;\n    const dummy = useMemo(() => new THREE.Object3D(), []); // Generate some random positions, speed factors and timings\n\n    const particles = useMemo(() => {\n      const temp = [];\n\n      for (let i = 0; i < count; i++) {\n        const t = Math.random() * 100;\n        const factor = 20 + Math.random() * 100;\n        const speed = 0.01 + Math.random() / 200;\n        const xFactor = -50 + Math.random() * 100;\n        const yFactor = -50 + Math.random() * 100;\n        const zFactor = -50 + Math.random() * 100;\n        temp.push({\n          t,\n          factor,\n          speed,\n          xFactor,\n          yFactor,\n          zFactor,\n          mx: 0,\n          my: 0\n        });\n      }\n\n      return temp;\n    }, [count]); // The innards of this hook will run every frame\n\n    useFrame(state => {\n      // Makes the light follow the mouse\n      light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0); // Run through the randomized data to calculate some movement\n\n      particles.forEach((particle, i) => {\n        let {\n          t,\n          factor,\n          speed,\n          xFactor,\n          yFactor,\n          zFactor\n        } = particle; // There is no sense or reason to any of this, just messing around with trigonometric functions\n\n        t = particle.t += speed / 2;\n        const a = Math.cos(t) + Math.sin(t * 1) / 10;\n        const b = Math.sin(t) + Math.cos(t * 2) / 10;\n        const s = Math.cos(t);\n        particle.mx += (mouse.current[0] - particle.mx) * 0.01;\n        particle.my += (mouse.current[1] * -1 - particle.my) * 0.01; // Update the dummy object\n\n        dummy.position.set(particle.mx / 10 * a + xFactor + Math.cos(t / 10 * factor) + Math.sin(t * 1) * factor / 10, particle.my / 10 * b + yFactor + Math.sin(t / 10 * factor) + Math.cos(t * 2) * factor / 10, particle.my / 10 * b + zFactor + Math.cos(t / 10 * factor) + Math.sin(t * 3) * factor / 10);\n        dummy.scale.set(s, s, s);\n        dummy.rotation.set(s * 5, s * 5, s * 5);\n        dummy.updateMatrix(); // And apply the matrix to the instanced item\n\n        mesh.current.setMatrixAt(i, dummy.matrix);\n      });\n      mesh.current.instanceMatrix.needsUpdate = true;\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pointLight\", {\n        ref: light,\n        distance: 40,\n        intensity: 8,\n        color: \"lightblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n        ref: mesh,\n        args: [null, null, count],\n        children: [/*#__PURE__*/_jsxDEV(\"dodecahedronGeometry\", {\n          args: [0.2, 0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: \"#050505\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  _s5(Particles, \"ZnorHZ9938QmZd23D59V2+jCdvQ=\", true, function () {\n    return [useFrame];\n  });\n\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [props.num, \" / 365\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daily-canvas\",\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        shadows: true,\n        performance: {\n          min: 0.5\n        },\n        dpr: [1, 2],\n        camera: {\n          fov: 100,\n          position: [0, 0, 5]\n        },\n        children: /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 41\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Particles, {\n            count: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n            enablePan: true,\n            enableZoom: true,\n            enableRotate: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"essay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"source\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"(1) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"(2) \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://www.cinra.net/interview/201404-mumgypsykawakami\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"\\u85E4\\u7530\\u8CB4\\u5927\\xD7\\u5DDD\\u4E0A\\u672A\\u6620\\u5B50\\u306E\\u53EB\\u3073\\u300C\\u307E\\u3060\\u5168\\u7136\\u8A00\\u3044\\u8DB3\\u308A\\u3066\\u306A\\u3044\\u300D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this), \" 2014/04/03\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date\",\n          children: \"2021.09.23\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PageNation, {\n      prev: \"1\",\n      next: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Num1;\nexport default Num1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Num1\");","map":{"version":3,"sources":["/Users/sanami/Desktop/react/webgl/src/pages/2.js"],"names":["React","Suspense","useEffect","useMemo","OrbitControls","Environment","useRef","Canvas","useFrame","THREE","PageNation","BoxBufferGeometry","Num1","props","Instances","count","temp","Object3D","ref","state","delta","current","rotation","z","i","id","position","set","scale","updateMatrix","setMatrixAt","matrix","Math","PI","Fireflies","shader","positionArray","scaleArray","Float32Array","Vector3","random","toArray","time","Fatline","curve","width","color","speed","material","Lines","colors","lines","Array","fill","map","pos","points","add","clone","CatmullRomCurve3","getPoints","parseInt","length","max","index","Particles","mouse","mesh","light","size","viewport","useThree","aspect","dummy","particles","t","factor","xFactor","yFactor","zFactor","push","mx","my","forEach","particle","a","cos","sin","b","s","instanceMatrix","needsUpdate","num","min","fov"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect, useMemo } from \"react\";\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport PageNation from \"../components/PageNation\";\nimport { BoxBufferGeometry } from \"three\";\n\nconst Num1 = (props) => {\n\n    function Instances({ count = 9, temp = new THREE.Object3D() }) {\n        const ref = useRef()\n        useFrame((state, delta) => (ref.current.rotation.z -= 0.001))\n\n        useEffect(() => {\n            // Set positions\n            for (let i = 0; i < count; i++) {\n                const id = i++;\n                temp.position.set(0, 0, i);\n                temp.scale.set(i, i, i);\n                temp.updateMatrix()\n                ref.current.setMatrixAt(id, temp.matrix)\n            }\n            // Update the instance\n            // ref.current.instanceMatrix.needsUpdate = true\n        }, [])\n        return (\n            <instancedMesh ref={ref} args={[null, null, count]} scale={0.1} rotation={[0, 0, Math.PI / 2]}>\n                <ringBufferGeometry args={[5, -5, 1]} />\n                <meshPhongMaterial color={'dimgray'} transparent opacity={'0.4'} />\n            </instancedMesh>\n        )\n    };\n\n    function Fireflies({ count = 40 }) {\n        const shader = useRef()\n        const [positionArray, scaleArray] = useMemo(() => {\n            const positionArray = new Float32Array(count * 3)\n            const scaleArray = new Float32Array(count)\n            for (let i = 0; i < count; i++) {\n                new THREE.Vector3((Math.random() - 0.5) * 4, Math.random() * 1.5, (Math.random() - 0.5) * 4).toArray(positionArray, i * 3)\n                scaleArray[i] = Math.random()\n            }\n            return [positionArray, scaleArray]\n        }, [count])\n        useFrame((state, delta) => (shader.current.time += delta / 2))\n        return (\n            <points key={count}>\n                <bufferGeometry>\n                    <bufferAttribute attachObject={['attributes', 'position']} count={count} array={positionArray} itemSize={3} />\n                    <bufferAttribute attachObject={['attributes', 'aScale']} count={count} array={scaleArray} itemSize={1} />\n                </bufferGeometry>\n                <fireflyMaterial ref={shader} transparent depthWrite={false} />\n            </points>\n        )\n    };\n\n    function Fatline({ curve, width, color, speed }) {\n        const material = useRef()\n        // useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n        return (\n            <mesh>\n                <BoxBufferGeometry attach=\"geometry\" vertices={curve} />\n                <meshPhongMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.9} />\n            </mesh>\n        )\n    };\n\n    function Lines({ count, colors }) {\n        const lines = useMemo(\n            () =>\n                new Array(count).fill().map(() => {\n                    const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n                    const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone())\n                    const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n                    return {\n                        color: colors[parseInt(colors.length * Math.random())],\n                        width: Math.max(0.1, 0.5 * Math.random()),\n                        speed: Math.max(0.0001, 0.0005 * Math.random()),\n                        curve\n                    }\n                }),\n            [colors, count]\n        )\n        return lines.map((props, index) => <Fatline key={index} {...props} />)\n    };\n\n    function Particles({ count, mouse }) {\n        const mesh = useRef()\n        const light = useRef()\n        const { size, viewport } = useThree()\n        const aspect = size.width / viewport.width\n\n        const dummy = useMemo(() => new THREE.Object3D(), [])\n        // Generate some random positions, speed factors and timings\n        const particles = useMemo(() => {\n            const temp = []\n            for (let i = 0; i < count; i++) {\n                const t = Math.random() * 100\n                const factor = 20 + Math.random() * 100\n                const speed = 0.01 + Math.random() / 200\n                const xFactor = -50 + Math.random() * 100\n                const yFactor = -50 + Math.random() * 100\n                const zFactor = -50 + Math.random() * 100\n                temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n            }\n            return temp\n        }, [count])\n        // The innards of this hook will run every frame\n        useFrame((state) => {\n            // Makes the light follow the mouse\n            light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0)\n            // Run through the randomized data to calculate some movement\n            particles.forEach((particle, i) => {\n                let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n                // There is no sense or reason to any of this, just messing around with trigonometric functions\n                t = particle.t += speed / 2\n                const a = Math.cos(t) + Math.sin(t * 1) / 10\n                const b = Math.sin(t) + Math.cos(t * 2) / 10\n                const s = Math.cos(t)\n                particle.mx += (mouse.current[0] - particle.mx) * 0.01\n                particle.my += (mouse.current[1] * -1 - particle.my) * 0.01\n                // Update the dummy object\n                dummy.position.set(\n                    (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n                    (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n                    (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n                )\n                dummy.scale.set(s, s, s)\n                dummy.rotation.set(s * 5, s * 5, s * 5)\n                dummy.updateMatrix()\n                // And apply the matrix to the instanced item\n                mesh.current.setMatrixAt(i, dummy.matrix)\n            })\n            mesh.current.instanceMatrix.needsUpdate = true\n        })\n        return (\n            <>\n                <pointLight ref={light} distance={40} intensity={8} color=\"lightblue\" />\n                <instancedMesh ref={mesh} args={[null, null, count]}>\n                    <dodecahedronGeometry args={[0.2, 0]} />\n                    <meshPhongMaterial color=\"#050505\" />\n                </instancedMesh>\n            </>\n        )\n    };\n\n\n\n    return (\n        <>\n            <h2>{props.num} / 365</h2>\n            <div className=\"daily-canvas\">\n                <Canvas\n                    shadows\n                    performance={{ min: 0.5 }}\n                    dpr={[1, 2]}\n                    camera={{ fov: 100, position: [0, 0, 5] }}\n                >\n\n                    {/* <ambientLight intensity={0.5} />\n                        <pointLight position={[5, 5, 10]} intensity={0.5} />\n                        <directionalLight position={[10, 10, 5]} color=\"#fff\" intensity={1} /> */}\n                    {/* <color attach=\"background\" args={['#1e2243']} /> */}\n                    {/* <fog attach=\"fog\" args={['#1e2243', 0, 15]} /> */}\n\n                    <Suspense fallback={<span>loading...</span>}>\n                        {/* <Environment preset=\"sunset\" background /> */}\n                        <ambientLight />\n                        {/* <Instances /> */}\n                        {/* <Fireflies count={40}/> */}\n                        {/* <Lines count={100} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} /> */}\n                        <Particles count={50} />\n                        <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\n                    </Suspense>\n                </Canvas>\n                <div className=\"essay\">\n                    <h3></h3>\n\n                    <p></p>\n                    <ul className=\"source\">\n                        <li>(1) </li>\n                        <li>(2) <a href=\"https://www.cinra.net/interview/201404-mumgypsykawakami\" target=\"_blank\" rel=\"noreferrer\">藤田貴大×川上未映子の叫び「まだ全然言い足りてない」</a> 2014/04/03</li>\n                    </ul>\n                    <p className=\"date\">2021.09.23</p>\n                </div>\n            </div>\n            <PageNation prev=\"1\" next=\"3\" />\n        </>\n    );\n}\n\nexport default Num1;"]},"metadata":{},"sourceType":"module"}